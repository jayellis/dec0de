{"version":3,"file":"static/js/293.ab68386d.chunk.js","mappings":"6JA0BA,EAvBoB,SAASA,GAAoE,IAAvBC,EAAU,uDAAG,QAErF,GAA0CC,EAAAA,EAAAA,WAAS,GAAM,eAAlDC,EAAc,KAAEC,EAAe,KAkBtC,OAjBAC,EAAAA,EAAAA,YAAU,WACR,IAAMC,EAAW,IAAIC,sBACnB,YAAc,IAAZC,GAAW,YAAN,GAELJ,EAAgBI,EAAML,eACxB,GACA,CACEF,WAAAA,IAMJ,OAHID,EAAIS,SACNH,EAASI,QAAQV,EAAIS,SAEhB,WACFT,EAAIS,SAAWH,EAASK,UAAUX,EAAIS,QAC3C,CACF,GAAG,IACIN,CACT,E,SCPA,EAdiC,SAAES,GACjC,IAAMZ,GAAMa,EAAAA,EAAAA,UACNC,EAAWC,EAAaf,GAE9B,OACE,gBACEA,IAAKA,EACLgB,UAAYF,EAAW,WAAa,YAAa,SAE/CF,EAAMK,UAGd,C,sDCcA,IAzBuC,SAAH,GAK5B,IAJNC,EAAG,EAAHA,IAGAC,GAFG,EAAHC,IACS,EAATC,UACW,EAAXF,aAGA,OACE,UAAC,IAAS,YACR,gBACEH,UAAU,UACVM,MAAQ,CACNC,gBAAgB,OAAD,OAAUL,EAAG,QAI9BC,GACE,cAAGH,UAAU,oBAAmB,SAAGG,KACnC,cAAGH,UAAU,oBAAmB,oBAK1C,C,4ECwDA,IAtE2C,SAAH,GAUhC,IATNQ,EAAE,EAAFA,GACAC,EAAK,EAALA,MACAC,EAAM,EAANA,OAEAC,GADa,EAAbC,cACU,EAAVD,YACAE,EAAK,EAALA,MACAC,EAAQ,EAARA,SACAC,EAAK,EAALA,MAGMC,GAFD,EAALC,MAEgB,SAAWR,EAAMS,cAAcC,QAAQ,KAAM,MAC7D,GAA8BjC,EAAAA,EAAAA,WAAS,GAAM,eAArCkC,EAAM,KAAEC,EAAS,KAgBzB,OACE,gBAEErB,UAAU,eACVsB,aAnBqB,SAAEC,GACVA,EAAEC,OACEC,QAAQd,WAC3BU,GAAW,EACb,EAgBIK,aAfqB,SAAEH,GACzBF,GAAW,EACb,EAaqC,WAEjC,gBACErB,UAAYoB,EAAS,UAAY,WAAY,UAE7C,gBACEpB,UAAU,mBACVM,MAAQ,CACNqB,gBAAiBd,GAASA,EAAMF,WAAaE,EAAMF,WAAa,QAChEJ,gBAAgB,OAAD,OAAUQ,EAAK,WAKpC,UAAC,KAAI,CAACa,GAAKZ,EAAS,WAClB,6BAAMN,MACN,eACEJ,MAAO,CAAEuB,MAAOlB,IAA0BE,GAASA,EAAMiB,QAAUjB,EAAMiB,QAAU,UAAU,SAEzFrB,KAEN,eAAIT,UAAU,QAAO,SAEjBc,EACEA,EAASiB,KAAK,SAAEC,EAAiBC,GAC/B,OAAO,wBAAoBD,GAAVC,EACnB,IAEA,UA/BFzB,EAsCZ,C,iHCpCA,UArCuB,WACrB,IAAM0B,GAAuBC,EAAAA,EAAAA,MAC7B,GAAwCjD,EAAAA,EAAAA,UAAUgD,GAAU,eAApDE,EAAW,KAAgB,KACnC,OACE,iCACE,oBACEpC,UAAU,eAAc,UAExB,gBAAKA,UAAU,gBAAe,UAC5B,gBAAKA,UAAU,iBAAgB,UAC7B,SAAC,IAAS,WACR,2CAKR,oBACEA,UAAU,wBAAuB,UAEjC,iBAAKA,UAAU,gBAAe,WAC5B,iBAAKA,UAAU,gBAAe,WAC5B,2CACA,SAAC,KAAI,CAAC4B,GAAG,QAAO,UACd,yCAGJ,eAAI5B,UAAU,eAAc,SACxBoC,GAAeA,EAAYL,KAAK,SAAEM,EAAsBJ,GAAa,OACrEI,EAAQC,OAAS,mBAAC,KAAW,kBAAKD,GAAO,IAAEE,IAAMN,KAAa,EAAE,aAO9E,C,wmUCxCA,SAASE,IACP,OAAOD,EAAAA,CACT,CAEA,SAASM,EAAgBC,GACvB,OAAOP,EAAAA,EAAAA,QAAsB,SAAEG,GAE7B,OADiBA,EAAQvB,UAAY,IACrB4B,WAAWxB,cAAcyB,SAAUF,EACrD,GACF,CAEA,SAASG,EAAYnC,GAKnB,OAJgByB,EAAAA,EAAAA,QAAsB,SAAEG,GACtC,IAAMQ,EAAcR,EAAQ5B,MAAMS,cAAcC,QAAQ,KAAM,KAC9D,OAAOV,GAASoC,CAClB,IACe,EACjB,C","sources":["hooks/UseOnScreen.ts","components/Animation.component.tsx","components/Media.component.tsx","components/Project.component.tsx","pages/Home.tsx","services/api.ts"],"sourcesContent":["import React from 'react'\nimport { useEffect, useState } from 'react'\n\nconst useOnScreen = function(ref: React.MutableRefObject<HTMLDivElement>, rootMargin = \"200px\") {\n  // State and setter for storing whether element is visible\n  const [isIntersecting, setIntersecting] = useState(false)\n  useEffect(() => {\n    const observer = new IntersectionObserver(\n      ([entry]) => {\n        // Update our state when observer callback fires\n        setIntersecting(entry.isIntersecting)\n      },\n      {\n        rootMargin,\n      }\n    )\n    if (ref.current) {\n      observer.observe(ref.current)\n    }\n    return () => {\n      if(ref.current) { observer.unobserve(ref.current) }\n    }\n  }, []); // Empty array ensures that effect is only run on mount and unmount\n  return isIntersecting\n}\n\nexport default useOnScreen\n","import React, { useRef } from 'react'\nimport UseOnScreen from '../hooks/UseOnScreen'\n\nconst Animation: React.FC<any> = ( props ) => {\n  const ref = useRef() as React.MutableRefObject<HTMLDivElement>\n  const onScreen = UseOnScreen( ref )\n\n  return (\n    <div \n      ref={ref}\n      className={ onScreen ? 'zoom-in ' : 'zoom-out ' } \n      >\n      { props.children }\n    </div>\n  )\n}\n\nexport default Animation\n","import React, { useRef } from 'react'\nimport MediaData from '../types/Media.type'\nimport Animation from './Animation.component'\n\nconst MediaCard: React.FC<MediaData> = ( {\n  url,\n  alt,\n  mediatype,\n  description,\n} ) => {\n\n  return (\n    <Animation>\n      <div \n        className='preview'\n        style={ { \n          backgroundImage: `url(${ url })` \n        } }\n        >\n      </div>\n      { description \n        ? <p className='image-description'>{ description }</p> \n        : <p className='image-description'>&nbsp;</p>\n      }\n      \n    </Animation>\n  )\n}\n\nexport default MediaCard\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport ProjectData from '../types/Project.type'\nimport MediaData from '../types/Media.type'\nimport MediaCard from './Media.component'\n\nconst renderImages = ( media: MediaData[] ) => {\n  return media.map( ( media: MediaData, index: number ) => {\n    if( index === 0 ) return <MediaCard {...media} key={ index } />\n      else return ''\n  } )\n}\n\nconst ProjectCard: React.FC<ProjectData> = ( {\n  id,\n  title,\n  client,\n  completeddate,\n  background,\n  theme,\n  keywords,\n  hover,\n  media\n} ) => {\n  const fullUrl = '/work/' + title.toLowerCase().replace(/ /g, '_')\n  const [ toShow, setToShow ] = useState(false)\n  const handleMouseEnter = ( e: any ) => {\n    const target = e.target\n    const url = target.dataset.background\n    setToShow( true )\n  }\n  const handleMouseLeave = ( e: any ) => {\n    setToShow( false )\n  }\n\n  const Keywords = () => {\n    return keywords.map( ( keyword: string, index: number ) => {\n      return <li key={ index }>keyword</li>\n    } )\n  }\n\n  return (\n    <li \n      key={ id } \n      className='project-card' \n      onMouseEnter={ handleMouseEnter }\n      onMouseLeave={ handleMouseLeave }\n      >\n      <div\n        className={ toShow ? 'zoom-in' : 'zoom-out' }\n        >\n        <div\n          className='background-image'\n          style={ { \n            backgroundColor: theme && theme.background ? theme.background : 'white',\n            backgroundImage: `url(${ hover })` ,\n          } }\n          >\n        </div>\n      </div>\n      <Link to={ fullUrl } >\n        <p> { client }</p>\n        <h2 \n          style={{ color: background ? background : theme && theme.primary ? theme.primary : 'white' }}\n          >\n            { title }\n        </h2>\n        <ul className='pills'>\n          {\n            keywords ? (\n              keywords.map( ( keyword: string, index: number ) => {\n                return <li key={ index }>{ keyword }</li>\n              } )\n            ) : (\n              ''\n            ) \n          }\n        </ul>\n      </Link>\n    </li>\n  )\n}\n\nexport default ProjectCard\n","import React, { useState } from 'react'\nimport { Link } from 'react-router-dom'\nimport ProjectData from '../types/Project.type'\nimport ProjectCard from '../components/Project.component'\nimport Animation from '../components/Animation.component'\n\nimport { getProjects, searchProjects } from '../services/api'\n\nconst Home: React.FC = () => {\n  const projects: Array<any> = getProjects()\n  const [ projectList, setProjectList ] = useState( projects )\n  return (\n    <>\n      <section\n        className='hero-section'\n        >\n        <div className='section-inner' >\n          <div className='section-middle'>\n            <Animation>\n              <h1>Hello</h1>\n            </Animation>\n          </div>\n        </div>\n      </section>\n      <section\n        className='project-list-listings'\n        >\n        <div className='section-inner'>\n          <div className='focus-wrapper'>\n            <h2>Focus on work</h2>\n            <Link to='/work'>\n              <p>See All</p>\n            </Link>\n          </div>\n          <ul className='project-list'>\n            { projectList && projectList.map( ( project: ProjectData, index: number ) => ( \n              project.focus ?  <ProjectCard {...project} key={ index } /> : ''\n            ) ) }\n          </ul>\n        </div>\n      </section>\n    </>\n  )\n}\n\nexport default Home\n","import ProjectData from '../types/Project.type'\nimport projects from '../projects.json'\n\nfunction getProjects() {\n  return projects.data\n}\n\nfunction searchProjects( search: any ) {\n  return projects.data.filter( ( project: any ) => {\n    const keywords = project.keywords || []\n    return keywords.toString().toLowerCase().includes( search ) \n  } )\n}\n\nfunction getProject( title: any ) {\n  const project = projects.data.filter( ( project: any ) => {\n    const urlEncTitle = project.title.toLowerCase().replace(/ /g, '_')\n    return title == urlEncTitle\n  } )\n  return project[0]\n}\n\nexport { getProjects, searchProjects, getProject }\n"],"names":["ref","rootMargin","useState","isIntersecting","setIntersecting","useEffect","observer","IntersectionObserver","entry","current","observe","unobserve","props","useRef","onScreen","UseOnScreen","className","children","url","description","alt","mediatype","style","backgroundImage","id","title","client","background","completeddate","theme","keywords","hover","fullUrl","media","toLowerCase","replace","toShow","setToShow","onMouseEnter","e","target","dataset","onMouseLeave","backgroundColor","to","color","primary","map","keyword","index","projects","getProjects","projectList","project","focus","key","searchProjects","search","toString","includes","getProject","urlEncTitle"],"sourceRoot":""}